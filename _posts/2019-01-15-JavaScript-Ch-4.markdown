---
title:  "[STUDY] JavaScript Ch 4"
date:   2019-01-15 15:13:24
categories: [STUDY]
tags: [JAVASCRIPT]
---

[STUDY] JAVASCRIPT MASTER BOOK - 기초부터 실무 응용까지 CHAPTER 4
루키바다TF - 한병익

# 4.1 함수란?

사용자 정의 함수 정의 방법

* function 명령
* function 생성자 경유
* 함수 리터럴 표현
* 애로우 함수로 정의

## 4.1.1 function 명령으로 정의하기

```
function 함수명(인수,...) {
	TODO
	return ;
}

return이 없다면 undefined를 반환.

```

함수명 부여 시 유의점

* 식별자의 조건에 만족할 필요가 있다
* 함수의 의도를 파악할 수 있도록 ( 동사 + 명사 형태가 일반적)
* camelCase 표기법

## 4.1.2 function 생성자로 정의하기

```
var 변수명 = new Function(인수,..., 함수의 내용);

일반 객체와 동일하게 new를 생략하여 사용가능

var param = 'height, width';
var formula = 'return height * width';
var func1 = new Function(param, formula);

```

외부에서 임의의 코드를 실행할 수 있으므로 지양
함수 생성자 코드는 특히 반복문에서 지양

## 4.1.3 함수 리터럴 표현으로 정의하기

```
var func1 = function(base, height) {
	return base * height;
}
```

함수 리터럴의 경우 익명 함수로 정의 된 후 변수에 넣는 방식

## 4.1.4 애로우 함수로 정의하기

리터럴보다 간결하게 사용할 수 있도록 제정

```
let func1 = (base, height) => {
	return base * height;
}

또는

let func1 = (base, height) => base * height;

위와 같이 애로우 뒤에 리턴 값을 사용하는 것도 가능(인수가 있는 경우에만)
```

# 4.2 함수를 정의할 때 주의할 네 가지 사항

## 4.2.1 return 명령은 도중에 개행하지 않는다
## 4.2.2 함수는 데이터형의 하나다
## 4.2.3 function 명령은 정적인 구조를 선언한다 (컴파일 시 함수 등록)
## 4.2.4 함수 리터럴/function 생성자는 실행할 때 판단된다 (코드 실행시에 판단)

# 4.3 변수는 어떤 곳에서 참조할 수 있을까? - 스코프

스코프란 변수가 스크립트 안의 어떤 곳에서 참조할 수 있는가를 결정하는 개념이다.

## 4.3.1 글로벌 변수와 로컬 변수의 차이점
C++과 동일

## 4.3.2 변수 선언에 var 명령이 필수인 이유

var를 사용하지 않는 경우 모두 글로벌 변수로 간주한다.
로컬 변수로 사용하고 싶다면 var를 명령을 사용해야 한다.

## 4.3.3 로컬 변수의 유효범위는 어디까지?

로컬 내에서 var로 선언되어 있다면, 시작부터 유효하다.
즉 로컬 변수는 함수 선두에 선언 및 정의를 해야한다. 아닌 경우 undefined로 정의

## 4.3.4 가인수의 스코프 - 기본형과 참조형의 차이 주의하기

C++과 동일
기본형의 경우 값을 복사하기 때문에 함수 내에서 바꾸더라도 글로벌 변수에는 영향 x
참조형의 경우 메모리에 직접 액세스하므로 변수에 영향을 준다.

## 4.3.5 블록 레벨의 스코프는 존재하지 않는다

if문 내에서 정의된 변수도 블록이 넘어서도 유지가 된다.
함수에서 변수명의 경합을 방지, 즉시 함수로 하는 경우 스코프로 인정

## 4.3.6 블록 스코프에 대응한 let 명령

let 명령은 블록 스코프에 반응 한다.
결국 즉시 함수를 이용하는 것 보다 let이 효율적

## 4.3.7 함수 리터럴/Function 생성자에서 스코프의 차이

함수 리터럴과 Function 생성자의 스코프 해석 차이가 존재한다.

# 4.4 인수의 다양한 표기법

## 4.4.1 JavaScript는 인수의 수를 체크하지 않는다

정의된 인수의 수와 호출 시 넣은 인수의 수가 달라도 체크하지 않는다.
try, catch문으로 묶은 경우에 다이얼로그 표시
디폴트 값을 설정해놓는 것이 중요하다.

## 4.4.2 가변길이 인수의 함수 정의하기

가변길이 인수의 함수란 인수의 개수가 미리 정해져 있지 않은 함수
argument 객체는 함수의 인수가 들어오는 것을 모두 저장하는 객체, 이를 통해 가변길이 인수를 처리할 수 있다.

```
function sum() {

for( var i = 0, len = arguments.lenght; i < len ;i++) {
}
// 이렇게 사용하면 인수가 몇개가 들어오든 처리 가능
}
```

## 4.4.3 명시적으로 선언된 인수와 가변길이 인수 혼재시키기

argument에는 선언된 인수 이후의 것들만 저장
argument를 유용하게 사용할 수도 있지만, 가독성문제로 최소화하는 것이 좋다.

## 4.4.4 명명된 인수로 코드를 읽기 쉽게하기

호출 시에 이름을 명시적으로 지정할 수 있는 인수를 말한다.

```
getTriangle({ base:5, height:4})
```

# 4.5 ES2015의 인수 표기법

## 4.5.1 인수의 디폴트 값

인수의 디폴트 값을 선언하려면, '가인수 = 디폴트' 형식으로 선언

```
function getTriangle(base = 1, height = 1) {
}
```

디폴트를 사용하는 경우라도, null은 그대로 적용된다.
undefined는 디폴트로 적용

필수적인 인수를 처리하고 싶은 경우에 require 함수를 사용
```
function required() {
throw new Error('인수가 부족합니다.');
}

function getTriangle(base = required(), height = 1) {
}
```

## 4.5.2 가변길이 인수의 함수 정의하기

가인수 앞에 ...을 부여하면 가변길이 인수가 된다.
argument보다 가독성을 높힐 수 있다.
argument는 실제로는 Array가 아니지만, ...을 사용하면 Array와 동일하게 사용가능

## 4.5.3 '...'연산자에 의한 인수의 전개

가변길이 함수에 배열을 넣는 경우 오류가 발생할 수 있다.
이런 경우 배열 앞에 ...을 넣어 해결할 수 있다.

## 4.5.4 명명된 인수로 코드를 이해하기 쉽게 하기

```
function show({name}) {
}
```

위와 같이 선언하는 경우 객체에서 name 프로퍼티만을 추출하여 사용한다.

# 4.6 함수 호출과 반환값

## 4.6.1 복수의 반환값을 개별 변수에 대입하기

복수 반환을 원할 때 객체나, 배열을 통해 반환한다.

```
function getMaxMin() {
	return [Math.max(), Math.min()];
}

let [max, min] = getMaxMin();

```
위와 같이 가독성을 높힌 방법으로 코딩 가능


## 4.6.2 함수 자신을 재귀적으로 호출하기 - 재귀함수

C++과 동일

## 4.6.3 함수의 인수도 함수 - 고차 함수

함수의 인수로 함수를 사용할 수 있다. (콜백 함수)

# 4.7 높은 수준의 함수 테마

## 4.7.1 템플릿 문자열을 애플리케이션 사양으로 커스터마이즈하기 - 태그 부여 템플릿 문자열

태그 부여 템플릿 문자열 (``)를 사용하게 되면 커스터마이징한 태그를 이용하여 문자열을 만들 수 있다.

```
function e(templamtes, ...values) {
templates과 변수들을 인수로 받아
따로 처리 가능
}
```

## 4.7.2 변수는 어떤 순서로 해결될까? - 스코프 체인

스크립트 실행 시 내부적으로 Global 객체를 생성한다.(편의적인 객체)
스코프 체인은 C++와 동일

## 4.7.3 같은 행동을 하는 객체 - 클로저

클로저란 로컬 변수를 참조하고 있는 함수 내의 함수를 말한다.

```
function closure(inti) {
 var counter = init;
 return function() {
  reutn ++counter;
 }
}
```

위와 같이 함수를 마무리할 때 익명 함수로 끝내는 것이다.


[jekyll]:      http://jekyllrb.com
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-help]: https://github.com/jekyll/jekyll-help
