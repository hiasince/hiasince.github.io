---
title:  "SOLID 원칙"
date:   2019-03-18 22:13:24
categories: [POST]
tags: [STUDY]
---

# SOLID 원칙

* ### SOLID 원칙 또는 객체지향 5대 원칙이란?

**S**RP(단일 책임 원칙), **O**CP(개방-폐쇄 원칙), **L**SP(리스코프 치환 원칙), **I**SP(인터페이스 분리 원칙), **D**IP(의존 역전 원칙)을 말하며, 앞자를 따서 SOILD 원칙이라고 부른다. 프로그래머가 시간이 지나도 유지 보수와 확장이 쉬운 소프트웨어를 만드는데 이 원칙들을 적용할 수 있다. 


## 단일 책임 원칙 (Single Responsiblity Principle)

### 소프트웨어 설계 요소(Class, Method 등)은 하나의 책임만을 가져야한다.

단일 책임 원칙이란, 소프트웨어 설계 요소 (Class, Method 등)은 하나의 책임만을 가지는 것을 의미한다.
여기서 책임이란, 기능, 관심사와 같은 단어와도 혼용된다. 설계를 잘한 프로그램은 `새로운 요구 사항이나 확장에 영향을 받는 부분`이 적다.
좋은 설계의 원칙인 높은 응집도와 낮은 결합도를 이루었을 때와 같다고 보면된다. 
결합도가 낮기 때문에 새로운 요구사항이 있더라도 변경되는 클래스가 적어 유지보수에 발생되는 비용을 줄일 수 있다.
또한 오류를 발견하였을 때 `어디서 발생한 오류인지 찾기 쉽고 수정하기 쉽다.`
위와 동일한 이유로 클래스 분리가 잘 되어 있으면, 오류난 코드가 어딘지 파악하기 쉽고, 이 후 수정하는 것도 쉽다.

## 개방-폐쇄 원칙 (Open-Closed Principle)

### 기존의 핵심적인 코드를 변경하지 않도록 막지만(Closed), 확장할 수 있도록(Open) 설계해야 한다.

핵심적으로 사용해야할 부분에 대해서는 추가적인 변경이 일어나지 않도록 막아야하고, 확장에는 열려있어야 한다는 말은 와닿는 말이 아니다.

해당 기능에 대해서는 확장할 수 있으면서, 그 기능을 사용하는 코드는 수정하지 않아야한다.....

**예를 들어** 

어떤 편의점 직원이라는 클래스가 있고, 그 직원의 핵심적 역할은 판매라고 해놓는다.
이 편의점 직원은 사장이 될 수도 있고, 알바, 정직원 등 많은 클래스로 확장할 수는 있지만, 판매라는 기능을 가진 것에 대해서는 변하지 않는다.
그래서 고객이 왔을 때 현재 그 직원이 누구든 판매를 하는 코드는 변하지 않고 유지된다.
이러한 원칙을 지키기 위해서 Interface를 가장 많이 사용하고, Strategy 패턴이나, Template Method 패턴을 이용하여 구현된다.


## 리스코프 치환 원칙 (Liskov Subsitution Principle)

### 자식 클래스는 부모클래스에서 가능한 행위를 수행할 수 있어야 한다.

리스코프 치환 원칙은 MIT 컴퓨터 사이언스 교수인 리스코프가 제안한 설계 원칙이다. 부모 클래스와 자식 클래스 사이의 행위에는 일관성이 있어야 한다는 원칙이며, 이는 객체 지향 프로그래밍에서 부모 객체 대신 자식 객체를 사용해도 문제가 없어야 한다는 것을 의미한다.

이는 설계적 측면에서 보았을 때, `부모 클래스를 설정했을때 생성되는 모든 자식들에게 부모 클래스의 메소드나 변수가 필요한 것인가` 아닌가에 대한 질문을 던져야한다.

**예를 들어** 

도형이라는 부모 클래스를 놓고, 자식 클래스로 삼각형, 사각형, 원을 설정했다고 하자.
도형이라는 클래스에는 둘레를 구하고, 넓이를 구하고, 내각의 합을 구하는 메소드가 있다고 했을 때
원이라는 클래스는 어색한 것을 느낄 수 있고, 내각의 합이라는 메소드는 문제가 있어보인다.

## 인터페이스 분리 원칙 (Interface Segregation Principle)

### 한 클래스는 자신이 사용하지 않는 인터페이스는 구현하지 말아야 한다. 하나의 일반적인 인터페이스보다는, 여러 개의 구체적인 인터페이스가 낫다.

첫 번째로 살펴보았던, 단일 책임 원칙과 이어지는 내용이다. `인터페이스 단에서 책임의 분리를 조금 더 세밀하게 나누는 것`을 말한다.
이를 통해 의존성을 약화시켜 리팩토링 및 수정에 드는 비용을 줄이고자 하는 것이다. 그러나 너무 많은 분리는 많은 인터페이스를 만들게 되고
이에 따라 적당한 수준의 분리가 필요하다. 

**예를 들어** 

이 전에 MacBook이라는 인터페이스 하나만을 만들어서 관리하고 있었다.
그러다가 이번에 MacBook에 새로 touchbar가 생기게 되었다. 
이런 경우 MacBook이라는 인터페이스 Touchbar가 생긴 후 모든 코드에 영향이 가게 되고, 신형이 아닌 구형의 구현체에도 영향이 가게 된다.
이렇게 구현하기 보다는 Touch bar라는 인터페이스를 분리하여 설계하는 것이 좋다는 것이다.

## 의존 역전 원칙 (Dependency Inversion Principle)

### 의존 관계를 맺을 때, 변화하기 쉬운것 보단 변화하기 어려운 것에 의존해야 한다는 원칙이다. 

여기서 변화하기 쉬운 것이란 구체적인 구현체와 같은 것을 말하고, 변화하기 어려운 것은 추상적인 인터페이스와 같은 것을 뜻한다.
아래 정의와 위의 말을 합쳐보면, `의존 관계를 맺을 때는 변화하기 쉬운 구체적인 구현체 보다는 추상적인 인터페이스와 의존해야 한다는 뜻`이다.
어찌보면 당연하다. 의존 관계란 관계를 맺은 것의 메소드를 가져다가 쓰는 것인데, 이러한 상황에서 구체적인 구현체를 가져다 쓴다면 확장에 있어 불리할 것이다.

**예를 들어**

데이터베이스를 사용하는데 있어서, Database Interface가 있고 구현체로 Mysql, Oracle, Mongo가 있을 때, 
의존 관계를 Database로 가지는 경우 기능 구현하는데 수정하는 부분이 적겠지만,
구현체로 의존하게 된다면, 수정하는데 많은 비용이 들수도 있다.

## 참고 출처 

https://dev-momo.tistory.com/entry/SOLID-원칙
