---
title:  "JVM에 대하여"
date:   2020-08-01 22:13:24
categories: [POST]
tags: [JAVA]
---

# Java Virtual Machine (JVM)


대학에 입학하여 처음 프로그래밍 언어를 접하게 되었고, 이는 C++ 였다. 그러다가 Java를 공부할 필요성을 느꼈고, 공부할 때 가장 먼저했던 것은 Java의 문법이었다. 하지만 점점 개발을 하다보니 Java의 다양한 설정 값들, 이를 잘 못 설정 했을 때의 문제가 발생하면서 Java를 실행시키기 위한 JVM에 대해 공부해야할 필요성에 대해 알게 되었다.

## JVM 이란?

JVM(Java Virtual Machine)를 글자 그대로 풀어서 해석해보면, Java를 구동시키기 위한 Virtual Machine이다. 여기서 Virtual Machine은 실제로 존재하는 기계(서버)가 아닌 소프트웨어적으로 Java를 구동시키기 위한 기계로, Java로 작성한 코드가 정상적으로 동작하기 위해 특정 행동을 해주는 발판을 뜻한다. 

Java 파일(.java)을 Java Compiler가 컴파일하면 자바 바이트 코드(.class)가 만들어진다. 이 바이트 코드는 기계어가 아닌 JVM을 위한 언어로 이 상태로는 실행시킬 수가 없다. JVM은 이 바이트 코드를 컴파일 및 실행시키는 소프트 웨어다. Java 프로그램이 운영체제 독립적으로 실행될 수 있는 것도 JVM 덕분이다. 어떠한 OS에 있더라도 JVM만 있다면 동일하게 동작할 수 있다. 하지만 JVM은 운영체제에 독립적이지 않다는 점... 결국 동작하고자하는 OS에 맞는 JVM이 필요한 것이다.

하지만 배포에 있어서 이점은 있다. 다른 컴파일 언어의 경우에 소스코드 없이 Byte code로 변환된 파일을 OS에 구애없이 실행시키진 못한다. 결국 각기 다른 OS에 따른 실행 파일을 만들어야 한다. 그러나 Java의 경우에는 Java ByteCode(.class)를 모아둔 JAR 파일을 만들어 놓으면 각 OS에 맞는 JVM만 갖춰진다면 같은 파일로 어디서든 실행시킬 수 있다는 장점이 있다.

## JVM 구조

1. Class Loader

Class Loader는 해당 프로그램이 수행하는데 필요한 .class 클래스 파일들을 찾아 그것을 JVM위에 올려놓는 과정을 뜻한다.

클래스 로딩에 대한 자세한 내용은 아래 글을 참고.

Java Class Loading 

[https://hiasince.github.io/2020/Java-Class-Load-%EA%B3%BC%EC%A0%95/](https://hiasince.github.io/2020/Java-Class-Load-과정/)

2. Runtime Data Area

Runtime Data Area는 JVM이 운영체제 위에서 실행되면서 할당받는 메모리 영역이다. 런타임 데이터 영역은 5개의 영역으로 나눌 수 있다. 

* Heap
  * 런타임 시 동적으로 할당되는 메모리 영역
* Method Stack(Class Area, Code Area, Static Area)
  *  JVM이 읽어 들인 Class와 Interface에 대한 Runtime Constant Pool, Field와 Method, Static 변수, Method의 Byte code 등을 보관하는 영역
* JVM Language Stack
  * 메소드 내에서 사용되는 지역 변수, 매개 변수, 임시 데이터들이 저장되는 영역
* Native Method Stack
  * JNI(Java Native method Interface)를 통해 호출하는 코드를 수행하기위한 스택으로 기계어로 작성된 프로그램을 실행시키는 영역
* PC Register
  * Thread가 어떤 명령어로 실행되어야 할지에 대한 기록을 하는 부분으로 현재 수행중인 JVM명령을 저장하는 영역

Runtime Data Area에 대한 자세한 내용은 아래 글을 참고.

Runtime Data Area

추후 쓸 예정

3. Execution Engine

Java Byte Code를 실제로 수행하는 바로 모듈이 Execution Engine이다. Class Loader를 통해 JVM 내의 Runtime Data Areas 에 배치된 바이트 코드는 Execution Engine에 의해 기계어로 변경한 뒤에 사용하게 된다. 바이트 코드를 기계어로 변경할 때엔 Interpreter와 JIT (Just-In-Time) compiler 두 종류의 방식을 사용한다. 

Execution Engine은 Java 프로그램을 수행하면서 메모리 관리도 해준다. 이 부분이 Java 프로그램의 주요한 특징인 Garbage Collector이다.

JIT compiler, Garbage Collection에 대한 자세한 내용은 아래 글을 참고.

JIT compiler

추후 쓸 예정

Garbage Collection

추후 쓸 예정

4. Native Method Interface, Native Method Library

Java Native Method Interface는 줄여서 JNI라고도 한다. JNI는 JVM에 의해 실행되는 코드 중 네이티브로 실행하는 것이 있다면 해당 네이티브 코드를 호출하거나 호출 될 수 있도록 만든 Interface이다. Native Method Library 해당 Native Method를 실행하기 위해 필요한 라이브러리들을 뜻한다.

## JVM 수행 과정

1. 프로그램이 실행되면 JVM은 OS로부터 이 프로그램이 필요로 하는 메모리를 할당 받는다. JVM은 이 메모리를 용도에 따라 여러 영역으로 나누어 관리한다.
2. 자바 컴파일러(javac)가 자바소스(.java)코드를 읽어 들여 자바 바이트코드(.class)로 변환시킨다.
3. 이 변경된 Class 파일들을 Class Loader를 통해 JVM 메모리영역(Runtime Data Areas) 영역으로 로딩한다.
4. 로딩된 class파일들은 Execution engine을 통해 해석된다.
5. 해석된 바이트코드는 Runtime Data Areas에 배치되어 실질적인 수행이 이루어지게된다.
   이러한 실행과정속에서 JVM은 필요에 따라 Thread Synchronization과 GC같은 관리 작업을 수행한다.

![image](/images/post/JVM/1.png)


### 참고

[https://ko.wikipedia.org/wiki/%EC%9E%90%EB%B0%94_%EA%B0%80%EC%83%81_%EB%A8%B8%EC%8B%A0](https://ko.wikipedia.org/wiki/자바_가상_머신)

https://minwan1.github.io/2018/06/06/2018-06-06-Java,JVM/#undefined

https://asfirstalways.tistory.com/158

https://velog.io/@aki/HotSpot-JVM

