---
title:  "[STUDY] JavaScript Ch 2"
date:   2019-01-15 15:13:24
categories: [STUDY]
tags: [JAVASCRIPT]
---

# 2.1 JavaScript의 기본적인 표기

추천 에디터 : Visual Studio Code, Subline Text, Atom

.html/.js/.css 에서 문자코드는 UTF-8로 통일 권고( Ajax 문제 발생 가능성, 국제화 대응 우수, HTML5에서도 추천)

### 오류가 난다면 개발자 도구에서 확인

* 오류 코드 행 확인
* 스펠링 확인
* 한국어 이외 모두 반각 문자인지 확인 (세미콜론 ';', 쿼트 ''', 공백 ' ' 주의해서 확인)
* 파일의 문자 코드 확인

## 2.1.2 JavaScript를 HTML 파일 안에 집어넣기

```
JavaScript를 HTML에 넣는 방법

1. Script 태그를 사용하는 방법.

<script type="text/javascript">
...
</script>

2. Anchor 태그를 사용하는 방법

<a href="JavaScript:실행할 JavaScript 코드;">

3. 외부 스크립트 import하는 방법 (외부, 내부 스크립트 혼용할 경우 무효가 되므로 새로 script 태그 지정)

<script type="text/javascript" src="JavaScript 파일경로"></script>
```

<br>**type은 스크립트 지정을 위함, HTML5는 기본적으로 JavaScript로 설정**

### \<script> 지정 위치에 따른 용도<br>


- <body> 안에서 임의의 위치에 사용되는 경우

처리 결과를 웹 페이지에 직접 출력하는 경우(가독성/보수성 저하로 지양)

- </body> 직전에서 사용되는 경우

스크립트가 존재하는 경우 화면 갱신 지연, 이를 고려한 웹 페이지 고속화 방법으로 직전에 사배치

- </head> 요소의 안에 사용되는 경우

\<body> 요소 안에서 직접 호출하는 함수를 정의하고 싶은 경우 <br>


## 2.1.3 문장의 규칙

* 문장의 맨끝에는 세미콜론을 붙인다.
* 문장 도중에 공백이나 개행, 탭을 포함하는 것도 가능
* 대문자/소문자 구별된다.
* 복수 문장을 단일행으로 작성하는 것도 가능 (각 문장은 ; 으로 구분, 비추천)

## 2.1.4 주석 삽입하기

* 단일행 주석
작성 방법 : // 주석 내용 <br>

* 복수행 주석
작성 방법 : /* 주석 내용 */       <br>

* 문서화 주석
작성 방법 : /** 주석 내용 */<br>

# 2.2 변수와 상수

## 2.2.1 변수 선언하기

### var 명령어 사용

* 여러 개 존재하는 경우 ,로 구분하여 선언 가능
* 선언 시 초기 값을 동시에 설정 가능
* 정의되지 않은 default 값은 undefined
* 선언이 필수적이지는 않다. 그러나 생략은 원칙적으로 하지 말자

### let 명령어 사용

기본적으로 var 명령어와 비슷하지만, 차이점 존재

* 변수의 중복을 허가하지 않음
* 블록 스코프를 인식하여 유효 범위를 관리할 수 있다.

## 2.2.2 식별자의 명명 규칙

* 첫 번째 문자는 영문자,(_),$ 중 하나
* 두 번째 문자 이후에는 첫 번째에서 사용할 수 있는 문자 또는 숫자
* 변수명에 포함된 영문자의 대문자/소문자는 구별되어야 함
* JavaScript의 예약어, 객체명, 멤버명이 아니여야 함

읽기 쉬운 코드 -> 가독성 좋은 코드 (코드 컨벤션)

식별자 명명 유의점

* 유추하기 쉽도록
* 적당한 길이로
* 혼동하지 않도록
* 첫번째 언더스코어는 특별한 의미, 사용 지양
* 영단어로 할 것

식별자 주요 기술 방법

* camelCase = 첫문자는 소문자, 이후 단어 첫문자는 대문자 ( 변수명, 함수명)
* pascal = 모든 단어의 첫문자는 대문자 ( 클래스명 )
* 언더스코어 = 모든 단어 대/소문자 통일 "_"로 연결 ( 상수명 )

## 2.2.3 상수 선언하기

상수 선언 = 상수 값이지만 의미를 가지고 있고, 코드에서 동일 값이 많이 사용되는 경우
const를 이용하여 선언, 모두 대문자

# 2.3 데이터형

실제로 데이터를 스크립트 안에서 취급하는데 종류에 대해 관대한 편이다.

## 2.3.1 JavaScript의 주요 데이터형

### 기본형 (변수에 값 자체가 보관)

* 숫자형 = 양,음수 10의 308승
* 문자열형 = 작은따옴표/큰따옴표로 감싸인 0개 이상의 문자
* 논리형 = true/false
* 심벌형 =
* 특수형 = null, undefined

### 참조형 (변수에 메모리 주소를 보관)

* 배열 = 데이터 집합 (인덱스)
* 객체 = 데이터 집합 (이름)
* 함수 = 절차의 집합

## 2.3.2 리터럴

리터럴이란 데이터형에 보관되는 표현 방법

* 숫자 리터럴 = 기본적으로 10진수, 바꾸고 싶다면 앞에'0x, 0b, 0o' 붙이기, 'e'로 표현 가능
* 문자열 리터럴= '', ""로 감싸서 표현, 특수한 문자는 이스케이프 스쿼스를 통해 표현 가능
* 템플릿 문자열 = 문자열 안에 변수를 넣는 경우 `(백쿼트)를 사용한다.
* 배열 리터럴 = ,로 구분한 []
* 객체 리터럴 = 객체 선언 (var obj = { x:1, y:2 }), 접근 (obj.x, obj['x'])
* 함수 리터럴 =

# 2.4 연산자

## 2.4.1 산술 연산자

* + : 피연산자가 둘이 데이터 형이 달라도, 연산
* ++, -- : c++과 동일
* 부동소수점이기 때문에 연산에 조심, 정수로 연산, 반올림 연산

## 2.4.2 대입 연산자

C++과 동일

기본형 vs 참조형 (= 연산자)

대입을 하는 경우 참조는 메모리 주소를 공유하기 때문에 하나가 변하면 다 변함
참조형 상수는 변경 가능 하지만 기본형은 불가능

### 분할대입

* 배열

배열 형태로 변수에 한 줄로 대입 가능

```
let data = [1,2,3,4,5,6];
let [x0,x1,x2,x3,x4,x5] = data;
```

* 객체

마찬가지로 객체의 속성도 분리해서 대입 가능

```
let book = {title:'asd', price: 2000, publish :'asd'};
let {a,b,c} = book;
```

## 2.4.3 비교 연산자

C++과 동일

### == 연산자, != 연산자

문자열/수치/논리형 = 값이 동일한지 판단
배열/객체 = 참조장소(메모리 주소)가 동일한지 판단
null/undefined = 동일

### === 연산자, !== 연산자

완전이 똑같지 않은 경우에 모두 false

## 2.4.4 논리 연산자

x === 1 && console.log('안녕하세요'); 가능
msg = msg || '안녕하세요'; 가능

## 2.4.5 비트 연산자

C++과 동일

## 2.4.6 그 외 연산자

* delete = 객체, 배열 요소 삭제 (성공 : true, 실패 : false, 배열의 요소 삭제되어도 인덱스 유지, 삭제 불가능한 것 존재)
* instanceof = 객체가 지정된 클래스의 인스턴스인지 판정
* new = 인스턴스 생성
* typeof = 데이터형 취득
* void = 미정으로 되돌림

## 2.4.7 연산자의 우선순위와 결합순서

C++과 동일

# 2.5 제어 구문

## 2.5.1 조건에 따라 분기 처리하기 - if 명령

C++과 동일

## 2.5.2 식의 값에 따라 분기 처리하기 - switch 명령

C++과 동일

## 2.5.3 조건식에 따라 루프 제어하기 - while/do while 명령

C++과 동일

## 2.5.4 무한루프

C++과 동일

## 2.5.5 지정 횟수만큼만 루프 처리하기 - for 명령

C++과 동일

## 2.5.6 연상 배열의 요소를 순서대로 처리하기 - for in 명령

python 과 동일

## 2.5.7 배열 등을 순서대로 처리하기 - for of 명령

for ( 가변수 of 열거 가능한 객체) {
}

배열 뿐만 아니라 객체도 가능하다.

## 2.5.8 루프를 도중에 스킵/중단하기 - break/continue 명령

C++과 동일

## 2.5.9 예외 처리하기 - try,catch,finally 명령

JAVA와 동일

## 2.5.10 JavaScript의 위험한 구문 금지하기 - Strict 모드

Strict란 좋지 않은 코드를 막는 것이 불가능하다는 이유로 오류로 통지해주는 구조



[jekyll]:      http://jekyllrb.com
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-help]: https://github.com/jekyll/jekyll-help
